{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Card/Card.js","components/Footer/Footer.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","status","score","topScore","Jumbotron","Card","onClick","imageClick","id","alt","src","image","Footer","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","currentScore","result","clicked","vegetables","gameOver","console","log","concat","_this","includes","resetGame","pointIncrease","push","setState","resetVegArray","points","newScramble","this","_this2","components_Navbar_Navbar","components_Jumbotron_Jumbotron","map","vegetable","components_Card_Card","key","components_Footer_Footer","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.78ab80bf.chunk.js","sourcesContent":["//sets up the reusable Navbar component\r\nimport React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">\r\n          <a href=\"/\">Test Your Memory</a>\r\n        </li>\r\n        <li className=\"brand1\">{props.status}</li>\r\n        <li className=\"brand2\">Score: {props.score} | Top Score: {props.topScore}</li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}     \r\n   \r\n\r\nexport default Navbar;","//sets up the reusable Jumbotron component\r\nimport React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = () => (\r\n\t<header className = \"header\">\r\n\t\t<h1>Clicky Game!</h1>\r\n\t\t<h2>Click on any image to earn a point, but don't click on the same picture more than once. Click all 12 pics, and you win.</h2>\r\n\t</header>\r\n);\r\nexport default Jumbotron;","//sets up the reusable FriendCard component\r\nimport React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//pass the image into each card so all 12 are rendered\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.imageClick(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.id} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => (\r\n\t<header className = \"footer\">\r\n\t\t<p>GAME CREATED BY SIMMIE</p>\r\n\t</header>\r\n);\r\n\r\nexport default Footer;","//imports dependencies and files\r\nimport React, { Component } from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport Card from \"./components/Card\";\r\nimport Footer from \"./components/Footer\";\r\nimport vegetables from \"./vegetables.json\";\r\nimport \"./App.css\";\r\n\r\nconst shuffleArray = (array) => {\r\n    let counter = array.length;\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n        // Decrease counter by 1\r\n        counter--;\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n    return array;\r\n};\r\n\r\nclass App extends Component {\r\n    state = {\r\n        currentScore: 0,\r\n        topScore: 0,\r\n        result: \"\",\r\n        clicked: [],\r\n        vegetables,\r\n        gameOver: false\r\n    };\r\n\r\n    // display starting message\r\n    componentDidMount() {\r\n        this.setState({ result: \"Click a player to get started\" });\r\n    }\r\n\r\n    // When a vegetable gets clicked,\r\n    // increase points and add id of element to array.\r\n    imageClick = (id) => {\r\n        console.log(`Picture clicked with id: ${id}`);\r\n        if (!this.state.clicked.includes(id)) {\r\n            this.pointIncrease();\r\n            this.state.clicked.push(id);\r\n            this.setState({\r\n                gameOver: false\r\n            });\r\n        } else {\r\n            this.resetGame();\r\n        }\r\n    }\r\n\r\n    // When the user makes a new click, increment the points by 1\r\n    // and check if the user has won\r\n    pointIncrease = () => {\r\n        let score = this.state.currentScore + 1;\r\n        console.log(`the score is ${score}`);\r\n        if (score === this.state.vegetables.length) {\r\n            this.setState({\r\n                result: \"You win! Start clicking to play again!\",\r\n                topScore: score,\r\n                currentScore: 0,\r\n                clicked: [],\r\n                vegetables,\r\n                gameOver: false\r\n            });\r\n        } else if (score > this.state.topScore) {\r\n            this.setState({\r\n                topScore: score,\r\n                currentScore: score,\r\n                result: \"Correct! New high score!\",\r\n            });\r\n        } else {\r\n            this.setState({\r\n                currentScore: score,\r\n                result: \"Correct!\"\r\n            });\r\n        }\r\n        this.resetVegArray();\r\n    }\r\n\r\n    // reset the game when the user clicked a pix twice\r\n    resetGame = () => {\r\n        this.setState({\r\n            points: 0,\r\n            currentScore: 0,\r\n            topScore: this.state.topScore,\r\n            result: \"You Loss!\",\r\n            clicked: [],\r\n            vegetables,\r\n            gameOver: true\r\n        });\r\n        console.log('Game over? ', this.state.gameOver);\r\n        this.resetVegArray();\r\n    }\r\n\r\n    // set the array to be mapped to a new scrambled version using shuffle algorithm\r\n    resetVegArray = () => {\r\n        let newScramble = shuffleArray(vegetables);\r\n        this.setState({ vegetables: newScramble })\r\n    }\r\n\r\n    //the order of components to be rendered: navbar, jumbotron, friendcard, footer \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    topScore={this.state.topScore}\r\n                    score={this.state.currentScore}\r\n                    status={this.state.result}\r\n                />\r\n                <Jumbotron />\r\n                <div className=\"wrapper\">\r\n                    {this.state.vegetables.map(vegetable => (\r\n                        <Card\r\n                            imageClick={this.imageClick}\r\n                            id={vegetable.id}\r\n                            key={vegetable.id}\r\n                            image={vegetable.image}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}